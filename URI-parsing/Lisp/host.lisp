(require "DEFINITIONS" "definitions.lisp") 
(require "IPADDRESS" "ipAddress.lisp")
(require "OPTIONAL" "optional.lisp")           

(provide "HOST")

(defun host-recognize (l &optional (authMode NIL) (zos-flag NIL))
  (cond ((stringp l) (host-recognize (coerce l 'list) 
                                     authMode 
                                     zos-flag))
        ((listp l) 
         (let ((ip (ipAddress-recognize l authMode zos-flag))) 
           (if (< (length ip) 5) 
                   (host-accept 'q0 l authMode zos-flag)
                 (append (list (append (car (car ip))
                                       (list #\.)
                                       (second (car ip))
                                       (list #\.)
                                       (third (car ip))
                                       (list #\.)
                                       (fourth (car ip)))
                         
                         (second ip) 
                         (third ip) 
                         (fourth ip) 
                         (fifth ip)))
                 )))
        )
  )


(defun host-accept (q l authMode zos-flag &optional (acc NIL))
  (cond ((null q) NIL)
        ((null l) 
         (if (host-final q) (list acc (if authMode (list #\8 #\0)
                                        NIL)
                                  NIL NIL NIL) NIL))
        ((and authMode (char= (car l) #\:)) 
         (if (host-final q) 
             (append (list acc) 
                     (port-recognize (cdr l) zos-flag))
           NIL))
				
        ((and authMode (char= (car l) #\/)) 
         (if (host-final q) 
             (append (list acc) 
                     (list (list #\8 #\0))
                     (optional-recognize (cdr l) zos-flag)) NIL))
				
        (T (host-accept (host-delta q (car l))
                        (cdr l)
                        authMode
                        zos-flag
                        (append acc (cons (car l) NIL))
                        ))
        )
  )

(defun host-final (q)
  (if (eql q 'q1) T NIL)
  )

(defun host-delta (q x)
  (cond ((eql q 'q0) (if (host-identifier x) 'q1 NIL))
        ((eql q 'q1) (cond ((char= x #\.) 'q2)
                           ((host-identifier x) 'q1)))
        ((eql q 'q2) (if (host-identifier x) 'q1 NIL))
        )
  )

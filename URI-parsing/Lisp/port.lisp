(require "DEFINITIONS" "definitions.lisp")
(require "OPTIONAL" "optional.lisp")

(provide "PORT")

(defun port-recognize (l &optional (zos-flag NIL))
  (cond ((stringp l) (port-recognize (coerce l 'list) zos-flag))
        ((listp l) (port-accept 'q0 l zos-flag))
  )
)

(defun port-accept (q l zos-flag &optional (acc NIL))
  (cond ((null q) NIL)
        ((null l) (if (port-final q) (list acc NIL NIL NIL) NIL))
        ((eql (car l) #\/) (if (port-final q) 
                               (append (list acc) 
                                       (optional-recognize (cdr l) 
                                                           zos-flag)) 
                             NIL))  
        (T (port-accept (port-delta q (car l))
                        (cdr l)
                        zos-flag
                        (append acc (cons (car l) NIL))
                        )
           )
        )
  )

(defun port-final (q)
  (if (eql q 'q1) T NIL)
)

(defun port-delta (q x)
  (if (digit x) (cond ((eql q 'q0) 'q1)
                      ((eql q 'q1) 'q1)
                      ) NIL)
)
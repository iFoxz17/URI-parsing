(require "DEFINITIONS" "definitions.lisp")
(require "QUERY" "query.lisp")
(require "FRAGMENT" "fragment.lisp")

(provide "PATH")


(defun path-recognize (l)
  (cond ((stringp l) (path-recognize (coerce l 'list)))
        ((listp l) (path-accept 'q0 l))
  )
)

(defun path-accept (q l &optional (acc NIL))
  (cond ((null q) NIL) 
        ((null l) (if (path-final q) (list acc NIL NIL) NIL))
        ((char= (car l) #\?) (if (path-final q) 
                                 (append (list acc) 
                                         (query-recognize (cdr l)))
                               NIL))
        ((char= (car l) #\#) (if (path-final q) 
                                 (append (list acc) 
                                         (list NIL) 
                                         (fragment-recognize (cdr l)))
                                 NIL))
        (T (path-accept (path-delta q (car l))
                        (cdr l)
                        (append acc (cons (car l) NIL))
           
                        )
           )
        )
  )

(defun path-final (q)
  (if (eql q 'q1) T NIL)
)

(defun path-delta (q x)
  (cond ((identifier x) (cond ((eql q 'q0) 'q1)
                              ((eql q 'q1) 'q1)
                              ((eql q 'q2) 'q1)
                         ))
        ((char= x #\/) (if (eql q 'q1) 'q2 NIL))
  )
)
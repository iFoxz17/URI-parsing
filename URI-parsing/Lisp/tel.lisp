(require "DEFINITIONS" "definitions.lisp")
(provide "TEL")

(defun tel-recognize (l)
  (cond ((stringp l) (tel-recognize (coerce l 'list)))
        ((listp l) (tel-accept 'q0 l))
        )
  )


(defun tel-accept (q l &optional (acc NIL))
  (cond ((null q) NIL)
        ((null l) (if (tel-final q) 
                      (list acc NIL NIL NIL NIL NIL) NIL))
        (T (tel-accept (tel-delta q (car l))
                       (cdr l)
                       (append acc (cons (car l) NIL))
                       ))
        )
  )

(defun tel-final (q)
  (if (eql q 'q1) T NIL)
  )

(defun tel-delta (q x)
  (cond ((eql q 'q0) (if (identifier x) 'q1 NIL))
        ((eql q 'q1) (if (identifier x) 'q1 NIL))
        )
  )
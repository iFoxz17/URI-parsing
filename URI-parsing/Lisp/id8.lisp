(require "DEFINITIONS" "definitions.lisp")
(require "QUERY" "query.lisp")
(require "FRAGMENT" "fragment.lisp")

(provide "ID8")

(defun id8-recognize (l)
  (cond ((stringp l) (id8-recognize (coerce l 'list)))
        ((listp l) (id8-accept 'q0 l))
  )
)

(defun id8-accept (q l &optional (acc NIL))
  (cond ((null q) NIL) 
        ((null l) (if (and (id8-final q) (< (length acc) 9)) 
                      (list acc NIL NIL) NIL))
        ((char= (car l) #\?) 
         (if (and (id8-final q) (< (length acc) 9)) 
             (append (list acc) (query-recognize (cdr l)))
           NIL))
        ((char= (car l) #\#) 
         (if (and (id8-final q) (< (length acc) 9))
             (append (list acc) 
                     (list NIL) 
                     (fragment-recognize (cdr l)))
           NIL))
        (T (id8-accept (id8-delta q (car l))
                       (cdr l)
                       (if (char= (car l) #\)) acc 
                         (append acc (cons (car l) NIL)))))
        )
  )

(defun id8-final (q)
  (if (eql q 'q2) T)
)

(defun id8-delta (q x)
  (cond ((eql q 'q0) (if (alpha x) 'q1))
        ((eql q 'q1) (cond ((alphanum x) 'q1)
                           ((char= x #\)) 'q2)
                           )
         )
        )
  )
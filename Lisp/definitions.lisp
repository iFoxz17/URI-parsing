(provide "DEFINITIONS")

(defun identifier (x)
  (cond ((char= x #\/) NIL)
        ((char= x #\?) NIL)
        ((char= x #\#) NIL)
        ((char= x #\@) NIL)
        ((char= x #\:) NIL)
        (T T)
   )
)

(defun host-identifier (x)
  (if (char= x #\.) NIL (identifier x))
)

(defun query (x) 
  (if (char= x #\#) NIL T)
)

(defun fragment(x)
  T
)

(defun digit (x)
  (cond ((char= x #\0) T)
        ((char= x #\1) T)
        ((char= x #\2) T)
        ((char= x #\3) T)
        ((char= x #\4) T)
        ((char= x #\5) T)
        ((char= x #\6) T)
        ((char= x #\7) T)
        ((char= x #\8) T)
        ((char= x #\9) T)
  )
)

(defun alpha (x)
  (cond ((or (char= x #\a) (char= x #\A)) T)
        ((or (char= x #\b) (char= x #\B)) T)
        ((or (char= x #\c) (char= x #\C)) T)
        ((or (char= x #\d) (char= x #\D)) T)
        ((or (char= x #\e) (char= x #\E)) T)
        ((or (char= x #\f) (char= x #\F)) T)
        ((or (char= x #\g) (char= x #\G)) T)
        ((or (char= x #\h) (char= x #\H)) T)
        ((or (char= x #\i) (char= x #\I)) T)
        ((or (char= x #\j) (char= x #\J)) T)
        ((or (char= x #\k) (char= x #\K)) T)
        ((or (char= x #\l) (char= x #\L)) T)
        ((or (char= x #\m) (char= x #\M)) T)
        ((or (char= x #\n) (char= x #\N)) T)
        ((or (char= x #\o) (char= x #\O)) T)
        ((or (char= x #\p) (char= x #\P)) T)
        ((or (char= x #\q) (char= x #\Q)) T)
        ((or (char= x #\r) (char= x #\R)) T)
        ((or (char= x #\s) (char= x #\S)) T)
        ((or (char= x #\t) (char= x #\T)) T)
        ((or (char= x #\u) (char= x #\U)) T)
        ((or (char= x #\v) (char= x #\V)) T)
        ((or (char= x #\x) (char= x #\X)) T)
        ((or (char= x #\w) (char= x #\W)) T)
        ((or (char= x #\y) (char= x #\Y)) T)
        ((or (char= x #\z) (char= x #\Z)) T)
        ) 

  )

(defun alphanum (x)
  (or (digit x) (alpha x))
)
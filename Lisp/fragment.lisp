(require "DEFINITIONS" "definitions.lisp")
(provide "FRAGMENT")
    
(defun fragment-recognize (l)
  (cond ((stringp l) (fragment-recognize (coerce l 'list)))
        ((listp l) (fragment-accept 'q0 l))
  )
)

(defun fragment-accept (q l &optional (acc NIL))
  (cond ((null q) NIL)
        ((null l) (if (fragment-final q) (cons acc NIL) NIL))
        (T (fragment-accept (fragment-delta q (car l))
                            (cdr l)
                            (append acc (cons (car l) NIL))
            ))
  )
)

(defun fragment-final (q)
  (if (eql q 'q1) T NIL)
)

(defun fragment-delta (q x)
  (if (fragment x)
      (cond ((eql q 'q0) 'q1)
            ((eql q 'q1) 'q1)
      )
  )
)